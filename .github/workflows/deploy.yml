name: Docker Build and Deploy via SSH

on:
  push:
    branches:
      - main # 배포할 브랜치 지정

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
            java-version: '17'
            distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy-via-ssh:
    needs: build-and-push # 이미지 빌드 후 실행
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-can-disable-strict-host-key-checking'

      - name: Determine current active container port
        run: |
          PORT=$(ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_SSH_PORT }} \
          ${{ secrets.REMOTE_SSH_USERNAME }}@${{ secrets.REMOTE_SSH_HOST }} \
          "grep -Po 'proxy_pass http://demo-app:(\\d+);' /home/dev/nginx/conf.d/default.conf | grep -Po '\\d+'")
          echo "CURRENT_PORT=$PORT" >> $GITHUB_ENV

      - name: Set next prot and contatiner
        run: | 
            if [ "${{ env.CURRENT_PORT }}" = "8888" ]; then
                echo "NEW_PORT=8889" >> $GITHUB_ENV
                echo "OLD_PORT=8888" >> $GITHUB_ENV
                echo "NEW_CONTAINER=demo-app-green" >> $GITHUB_ENV
                echo "OLD_CONTAINER=demo-app" >> $GITHUB_ENV
            else
                echo "NEW_PORT=8888" >> $GITHUB_ENV
                echo "OLD_PORT=8889" >> $GITHUB_ENV
                echo "NEW_CONTAINER=demo-app" >> $GITHUB_ENV
                echo "OLD_CONTAINER=demo-app-green" >> $GITHUB_ENV
            fi

      - name: SSH into server and deploy new container
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_SSH_PORT }} ${{ secrets.REMOTE_SSH_USERNAME }}@${{ secrets.REMOTE_SSH_HOST }} << EOF
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
            docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}
          
            docker stop demo-app || true && docker rm demo-app || true
          
            docker run -d \
              --name ${{ env.NEW_CONTAINER }} \
              --network app-network \
              -p ${{ env.NEW_PORT }}:8888 \
              ghcr.io/${{ github.repository }}:${{ github.sha }}
          EOF

      - name: new container check
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_SSH_PORT }} ${{ secrets.REMOTE_SSH_USERNAME }}@${{ secrets.REMOTE_SSH_HOST }} << EOF
            for i in {1..10}; do
              sleep 5
              STATUS=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:${{ env.NEW_PORT }}/health || echo "000")
              if [ "\$STATUS" = "200" ]; then
                echo "Health check passed"
                exit 0
              fi
            done
            echo "Health check failed"
            docker rm -f ${{ env.NEW_CONTAINER }}
            exit 1
          EOF

      - name: Update Nginx configuration
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_SSH_PORT }} ${{ secrets.REMOTE_SSH_USERNAME }}@${{ secrets.REMOTE_SSH_HOST }} << EOF
            sed -i "s/proxy_pass http:\/\/demo-app:[0-9]\+;/proxy_pass http:\/\/${{ env.NEW_CONTAINER }}:${{ env.NEW_PORT }};/" /home/dev/nginx/conf.d/default.conf
            docker exec nginx-server nginx -s reload
          EOF

      - name: Remove old container
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_SSH_PORT }} \
           ${{ secrets.REMOTE_SSH_USERNAME }}@${{ secrets.REMOTE_SSH_HOST }} \
           "docker rm -f ${{ env.OLD_CONTAINER }} || true"
